resource_types:
- name: gcs
  type: registry-image
  source: {repository: frodenas/gcs-resource}

- name: bosh-release
  type: registry-image
  source: {repository: dpb587/bosh-release-resource}

- name: bosh-deployment
  type: registry-image
  source: {repository: cloudfoundry/bosh-deployment-resource}

- name: slack-notifier
  type: registry-image
  source: {repository: mockersf/concourse-slack-notifier}

groups:
- name: develop
  jobs:
  - unit
  - dev-image
  - testflight
  - containerd-integration
  - watsjs
  - rc
  - build-rc
  - build-rc-image
  - bin-smoke
  - bin-smoke-containerd
  - upgrade
  - downgrade

- name: quickstart
  jobs:
  - quickstart-smoke

- name: k8s
  jobs:
  - k8s-check-helm-params
  - k8s-smoke
  - k8s-topgun
  - k8s-topgun-pks

- name: bosh
  jobs:
  - bosh-bump
  - bosh-smoke
  - bosh-topgun-core
  - bosh-topgun-runtime
  - bosh-topgun-both
  - bosh-topgun-pcf
  - bosh-check-props
  - merge-cbd

- name: images
  jobs:
  - resource-types-images
  - unit-image
  - build-golang-builder-image

- name: publish
  jobs:
  - major
  - minor
  - shipit
  - publish-binaries
  - publish-image
  - publish-bosh-release
  - promote-cbd
  - bump-cbd-versions
  - publish-docs
  - ship-chart
  - publish-chart
  - pre
  - publish-pre-binaries

- name: workers
  jobs:
  - install-windows-deps

jobs:
- name: unit-image
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - get: oci-build-task
    - get: golang-builder-trigger
      trigger: true
      params:
        skip_download: true
  - task: build
    image: oci-build-task
    privileged: true
    config:
      platform: linux
      params: {CONTEXT: ci/dockerfiles/unit}
      inputs: [{name: ci}]
      outputs: [{name: image}]
      caches: [{path: cache}]
      run: {path: build}
  - put: unit-image
    params: {image: image/image.tar}
  on_success: &fixed-ci
    do:
    - task: format-slack-message
      file: ci/tasks/format-slack-message.yml
      input_mapping: {src: ci}
      params:
        GITHUB_TOKEN: ((concourse_github_dummy.access_token))
        SLACK_TOKEN: ((slack_token))
    - put: notify
      params:
        message_file: message/message
        mode: normal
        alert_type: fixed
  on_failure: &broke-ci
    do:
    - task: format-slack-message
      file: ci/tasks/format-slack-message.yml
      input_mapping: {src: ci}
      params:
        GITHUB_TOKEN: ((concourse_github_dummy.access_token))
        SLACK_TOKEN: ((slack_token))
    - put: notify
      params:
        message_file: message/message
        mode: normal
        alert_type: broke

- name: build-golang-builder-image
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: ci
    - get: oci-build-task
    - get: golang-linux
      trigger: true
  - task: build
    image: oci-build-task
    privileged: true
    file: ci/tasks/build-golang-builder-image.yml
  - put: golang-builder-image
    params: {image: image/image.tar}
  on_success: *fixed-ci
  on_failure: *broke-ci

- name: unit
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      trigger: true
    - get: unit-image
      trigger: true
    - get: ci
  - task: yarn-test
    image: unit-image
    file: ci/tasks/yarn-test.yml
  - in_parallel:
    - task: unit
      image: unit-image
      file: ci/tasks/unit.yml
      input_mapping: {concourse: built-concourse}
      timeout: 1h
    - task: fly-darwin
      file: ci/tasks/fly-darwin.yml
      timeout: 1h
    - task: fly-windows
      file: ci/tasks/fly-windows.yml
      timeout: 1h
  on_success: &fixed-concourse
    do:
    - task: format-slack-message
      file: ci/tasks/format-slack-message.yml
      input_mapping: {src: concourse}
      params:
        GITHUB_TOKEN: ((concourse_github_dummy.access_token))
        SLACK_TOKEN: ((slack_token))
    - put: notify
      params:
        message_file: message/message
        mode: normal
        alert_type: fixed
  on_failure: &broke-concourse
    do:
    - task: format-slack-message
      file: ci/tasks/format-slack-message.yml
      input_mapping: {src: concourse}
      params:
        GITHUB_TOKEN: ((concourse_github_dummy.access_token))
        SLACK_TOKEN: ((slack_token))
    - put: notify
      params:
        message_file: message/message
        mode: normal
        alert_type: broke

- name: resource-types-images
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: bosh-io-release-resource
      trigger: true
    - get: bosh-io-stemcell-resource
      trigger: true
    - get: cf-resource
      trigger: true
    - get: docker-image-resource
      trigger: true
    - get: git-resource
      trigger: true
    - get: github-release-resource
      trigger: true
    - get: hg-resource
      trigger: true
    - get: pool-resource
      trigger: true
    - get: registry-image-resource
      trigger: true
    - get: s3-resource
      trigger: true
    - get: semver-resource
      trigger: true
    - get: time-resource
      trigger: true
    - get: tracker-resource
      trigger: true
    - get: mock-resource
      trigger: true
    - get: oci-build-task
      trigger: true
    - get: ci
  - in_parallel:
    - task: build-alpine
      image: oci-build-task
      privileged: true
      params:
        BUILD_ARG_distro: alpine
      file: ci/tasks/build-resource-types-image.yml
    - task: build-ubuntu
      output_mapping: {image: image_ubuntu}
      image: oci-build-task
      privileged: true
      params:
        BUILD_ARG_distro: ubuntu
      file: ci/tasks/build-resource-types-image.yml
  - in_parallel:
    - put: resource-types-alpine-image
      params: {image: image/image.tar}
      get_params: {format: oci}
    - put: resource-types-ubuntu-image
      params: {image: image_ubuntu/image.tar}
      get_params: {format: oci}

- name: dev-image
  public: true
  serial: true
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: concourse
        trigger: true
      - get: unit-image
        trigger: true
      - get: golang-builder-trigger
        trigger: true
        params:
          skip_download: true
      - get: gdn
        trigger: true
      - get: containerd
        trigger: true
      - get: runc
        trigger: true
      - get: cni
        trigger: true
      - get: dumb-init
        trigger: true
      - get: resource-types-alpine-image
        passed: [resource-types-images]
        trigger: true
      - get: oci-build-task
      - get: ci
  - in_parallel:
      fail_fast: true
      steps:
        - task: yarn-build
          image: unit-image
          file: ci/tasks/yarn-build.yml
        - task: fly-linux
          file: ci/tasks/fly-build-linux.yml
        - task: fly-windows
          file: ci/tasks/fly-build-windows.yml
        - task: fly-darwin
          file: ci/tasks/fly-build-darwin.yml
  - task: build
    image: oci-build-task
    privileged: true
    input_mapping: {concourse: built-concourse, resource-types-image: resource-types-alpine-image}
    file: ci/tasks/build-dev-image.yml
  - put: dev-image
    params: {image: image/image.tar}
    get_params: {format: oci}
  on_success: *fixed-concourse
  on_failure: *broke-concourse

- name: containerd-integration
  public: true
  max_in_flight: 1
  plan:
  - in_parallel:
    - get: concourse
      passed: [unit, dev-image]
      trigger: true
    - get: dev-image
      passed: [dev-image]
    - get: ci
  - task: integration
    image: dev-image
    privileged: true
    timeout: 1h
    file: ci/tasks/containerd-integration.yml
  on_success: *fixed-concourse
  on_failure: *broke-concourse

- name: testflight
  public: true
  max_in_flight: 2
  plan:
  - in_parallel:
    - get: concourse
      passed: [unit, dev-image]
      trigger: true
    - get: unit-image
    - get: dev-image
      passed: [dev-image]
      trigger: true
      params: {format: oci}
    - get: postgres-image
      params: {format: oci}
    - get: ci
  - task: testflight
    image: unit-image
    privileged: true
    timeout: 1h
    file: ci/tasks/docker-compose-testflight.yml
  on_success: *fixed-concourse
  on_failure: *broke-concourse

- name: watsjs
  public: true
  max_in_flight: 2
  plan:
  - in_parallel:
    - get: concourse
      passed: [unit, dev-image]
      trigger: true
    - get: unit-image
    - get: dev-image
      passed: [dev-image]
      trigger: true
      params: {format: oci}
    - get: postgres-image
      params: {format: oci}
    - get: ci
  - task: watsjs
    image: unit-image
    privileged: true
    timeout: 1h
    file: ci/tasks/docker-compose-watsjs.yml
  on_success: *fixed-concourse
  on_failure: *broke-concourse

- name: upgrade
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [unit, dev-image]
      trigger: true
    - get: dev-image
      passed: [dev-image]
      params: {format: oci}
      trigger: true
    - get: unit-image
    - get: concourse-image
      params: {format: oci}
    - get: postgres-image
      params: {format: oci}
    - get: ci
  - task: upgrade-test
    privileged: true
    image: unit-image
    file: ci/tasks/upgrade-test.yml
  on_success: *fixed-concourse
  on_failure: *broke-concourse

- name: downgrade
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [unit, dev-image]
      trigger: true
    - get: dev-image
      passed: [dev-image]
      params: {format: oci}
      trigger: true
    - get: unit-image
    - get: concourse-image
      params: {format: oci}
    - get: postgres-image
      params: {format: oci}
    - get: ci
  - task: downgrade-test
    privileged: true
    image: unit-image
    file: ci/tasks/downgrade-test.yml
  on_success: *fixed-concourse
  on_failure: *broke-concourse

- name: k8s-smoke
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [build-rc-image]
      trigger: true
    - get: concourse-rc-image
      passed: [build-rc-image]
      params: {format: oci}
      trigger: true
    - get: concourse-rc-image-ubuntu
      passed: [build-rc-image]
      params: {format: oci}
      trigger: true
    - get: version
      passed: [build-rc-image]
      trigger: true
    - get: concourse-chart
      trigger: true
    - get: unit-image
    - get: ci
  - try:
      task: try-delete
      image: unit-image
      file: ci/tasks/k8s-delete.yml
      params:
        KUBE_CONFIG: ((kube_config))
        RELEASE_NAME: concourse-smoke
        CONCOURSE_IMAGE: concourse/concourse-rc
  - task: deploy
    image: unit-image
    input_mapping: {image-info: concourse-rc-image}
    file: ci/tasks/k8s-deploy.yml
    params:
      KUBE_CONFIG: ((kube_config))
      RELEASE_NAME: concourse-smoke
      CONCOURSE_IMAGE: concourse/concourse-rc
  - task: k8s-smoke
    image: unit-image
    file: ci/tasks/k8s-smoke.yml
    params:
      KUBE_CONFIG: ((kube_config))
      RELEASE_NAME: concourse-smoke
      MAX_TICKS: 180
  - task: delete
    image: unit-image
    file: ci/tasks/k8s-delete.yml
    params:
      KUBE_CONFIG: ((kube_config))
      RELEASE_NAME: concourse-smoke
      CONCOURSE_IMAGE: concourse/concourse-rc
  on_success: *fixed-concourse
  on_failure: *broke-concourse

- name: k8s-topgun
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [k8s-smoke]
      tags: [k8s-topgun]
      trigger: true
    - get: version
      passed: [k8s-smoke]
      tags: [k8s-topgun]
      trigger: true
    - get: concourse-rc-image
      params: {format: oci}
      passed: [k8s-smoke]
      tags: [k8s-topgun]
      trigger: true
    - get: concourse-rc-image-ubuntu
      params: {format: oci}
      passed: [k8s-smoke]
      tags: [k8s-topgun]
      trigger: true
    - get: unit-image
      tags: [k8s-topgun]
    - get: concourse-chart
      passed: [k8s-smoke]
      tags: [k8s-topgun]
      trigger: true
    - get: helm-charts
      tags: [k8s-topgun]
    - get: ci
      tags: [k8s-topgun]
  - task: k8s-topgun
    file: ci/tasks/k8s-topgun.yml
    tags: [k8s-topgun]
    image: unit-image
    params:
      IN_CLUSTER: "true"
      KUBE_CONFIG: ((kube_config))
      CONCOURSE_IMAGE_NAME: concourse/concourse-rc
  on_success: *fixed-concourse
  on_failure: *broke-concourse

- name: k8s-topgun-pks
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [k8s-smoke]
      trigger: true
      tags: [pks]
    - get: version
      passed: [k8s-smoke]
      trigger: true
      tags: [pks]
    - get: concourse-rc-image
      passed: [k8s-smoke]
      trigger: true
      tags: [pks]
      params: {format: oci}
    - get: unit-image
      tags: [pks]
    - get: concourse-chart
      trigger: true
      passed: [k8s-smoke]
      tags: [pks]
    - get: helm-charts
    - get: ci
  - task: k8s-topgun
    tags: [pks]
    file: ci/tasks/k8s-topgun.yml
    image: unit-image
    params:
      KUBE_CONFIG: ((kube_config_pks))
      CONCOURSE_IMAGE_NAME: concourse/concourse-rc
      K8S_ENGINE: PKS
  on_success: *fixed-concourse
  on_failure: *broke-concourse

- name: k8s-check-helm-params
  public: true
  max_in_flight: 1
  plan:
  - in_parallel:
    - get: concourse
      passed: [build-rc-image]
      trigger: true
    - get: concourse-rc-image
      passed: [build-rc-image]
      trigger: true
    - get: concourse-rc-image-ubuntu
      passed: [build-rc-image]
      trigger: true
    - get: linux-rc-ubuntu
      passed: [build-rc-image]
      trigger: true
    - get: version
      passed: [build-rc-image]
      trigger: true
    - get: unit-image
    - get: concourse-chart
      trigger: true
    - get: ci
  - task: check-params
    file: ci/tasks/check-distribution-env.yml
    image: unit-image
    input_mapping: {distribution: concourse-chart, linux-rc: linux-rc-ubuntu}
    params: {DISTRIBUTION: helm}
  on_success: *fixed-concourse
  on_failure: *broke-concourse

- name: rc
  public: true
  serial_groups: [version]
  plan:
  - in_parallel:
    - get: concourse
      passed: [testflight, watsjs, upgrade, downgrade]
      trigger: true
    - get: dev-image
      trigger: true
      passed: [testflight, watsjs, upgrade, downgrade]
    - get: unit-image
    - get: ci
  - put: version
    params: {pre: rc}

- name: build-rc
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [rc]
      trigger: true
    - get: unit-image
    - get: version
      passed: [rc]
      trigger: true
    - get: final-version
      resource: version
      passed: [rc]
      params: {bump: final}
    - get: gdn
      trigger: true
    - get: containerd
      trigger: true
    - get: runc
      trigger: true
    - get: cni
      trigger: true
    - get: ci
    - get: resource-types-alpine-image
      passed: [resource-types-images]
    - get: resource-types-ubuntu-image
      passed: [resource-types-images]
  - in_parallel:
    - task: fly-linux
      file: ci/tasks/fly-build-linux.yml
      params:
        USE_EXTERNAL_LINKER: false
    - task: fly-windows
      file: ci/tasks/fly-build-windows.yml
    - task: fly-darwin
      file: ci/tasks/fly-build-darwin.yml
  - in_parallel:
      fail_fast: true
      steps:
        - task: hoist-resource-types-alpine
          file: ci/tasks/hoist-linux-dependencies.yml
          image: resource-types-alpine-image
          output_mapping: {resource-types: resource-types-alpine}
        - task: hoist-resource-types-ubuntu
          file: ci/tasks/hoist-linux-dependencies.yml
          image: resource-types-ubuntu-image
          output_mapping: {resource-types: resource-types-ubuntu}
        - task: yarn-build
          file: ci/tasks/yarn-build.yml
          image: unit-image
  - in_parallel:
      fail_fast: true
      steps:
      - task: concourse-linux-alpine
        file: ci/tasks/concourse-build-linux.yml
        image: unit-image
        params:
          PLATFORM: linux
        input_mapping: {concourse: built-concourse, resource-types: resource-types-alpine}
        output_mapping: {concourse-tarball: concourse-linux-alpine}
      - task: concourse-linux-ubuntu
        image: unit-image
        params:
          PLATFORM: linux-ubuntu
        file: ci/tasks/concourse-build-linux.yml
        input_mapping: {concourse: built-concourse, resource-types: resource-types-ubuntu}
        output_mapping: {concourse-tarball: concourse-linux-ubuntu}
      - task: concourse-windows
        file: ci/tasks/concourse-build-windows.yml
        input_mapping: {concourse: built-concourse}
      - task: concourse-darwin
        file: ci/tasks/concourse-build-darwin.yml
        input_mapping: {concourse: built-concourse}
        output_mapping: {concourse-tarball: concourse-darwin}
  - in_parallel:
    - put: linux-rc
      params: {file: concourse-linux-alpine/concourse-*.tgz}
      inputs: [concourse-linux-alpine]
    - put: linux-rc-ubuntu
      params: {file: concourse-linux-ubuntu/concourse-*.tgz}
      inputs: [concourse-linux-ubuntu]
    - put: windows-rc
      params: {file: concourse-windows/concourse-*.zip}
      inputs: [concourse-windows]
    - put: darwin-rc
      params: {file: concourse-darwin/concourse-*.tgz}
      inputs: [concourse-darwin]

- name: build-rc-image
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [build-rc]
      trigger: true
    - get: unit-image
    - get: version
      passed: [build-rc]
      trigger: true
    - get: linux-rc
      trigger: true
      passed: [build-rc]
    - get: linux-rc-ubuntu
      trigger: true
      passed: [build-rc]
    - get: concourse-docker
      trigger: true
    - get: oci-build-task
    - get: ci
  - in_parallel:
      fail_fast: true
      steps:
        - task: build-alpine
          file: concourse-docker/ci/build-image.yml
          image: oci-build-task
          output_mapping: {image: image-alpine}
          privileged: true
        - task: build-ubuntu
          file: concourse-docker/ci/build-image.yml
          image: oci-build-task
          input_mapping: {linux-rc: linux-rc-ubuntu}
          output_mapping: {image: image-ubuntu}
          privileged: true
  - in_parallel:
      fail_fast: true
      steps:
        - put: concourse-rc-image
          inputs: [image-alpine, version]
          params:
            image: image-alpine/image.tar
            additional_tags: version/version
        - put: concourse-rc-image-ubuntu
          inputs: [image-ubuntu, version]
          params:
            image: image-ubuntu/image.tar
            additional_tags: version/version
  on_success: *fixed-concourse
  on_failure: *broke-concourse

- name: bin-smoke
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [build-rc]
      trigger: true
    - get: version
      passed: [build-rc]
      trigger: true
    - get: linux-rc-ubuntu
      passed: [build-rc]
      trigger: true
    - get: unit-image
    - get: ci
  - task: terraform-smoke
    image: unit-image
    file: ci/tasks/terraform-smoke.yml
    input_mapping: {linux-rc: linux-rc-ubuntu}
    params:
      GCP_PROJECT: cf-concourse-production
      GCP_KEY: ((concourse_smoke_gcp_key))
      SSH_KEY: ((concourse_smoke_ssh_key))
      DEPLOYMENT: smoke
  - task: smoke
    image: unit-image
    file: ci/tasks/smoke.yml
    input_mapping: {endpoint-info: outputs}
  on_success: *fixed-concourse
  on_failure: *broke-concourse

- name: bin-smoke-containerd
  public: true
  serial: true
  plan:
    - in_parallel:
        - get: concourse
          passed: [build-rc]
          trigger: true
        - get: version
          passed: [build-rc]
          trigger: true
        - get: linux-rc-ubuntu
          passed: [build-rc]
          trigger: true
        - get: unit-image
        - get: ci
    - task: terraform-smoke
      image: unit-image
      file: ci/tasks/terraform-smoke.yml
      input_mapping: {linux-rc: linux-rc-ubuntu}
      params:
        GCP_PROJECT: cf-concourse-production
        GCP_KEY: ((concourse_smoke_gcp_key))
        SSH_KEY: ((concourse_smoke_ssh_key))
        DEPLOYMENT: smoke
        WORKSPACE: containerd
    - task: smoke
      image: unit-image
      file: ci/tasks/smoke.yml
      input_mapping: {endpoint-info: outputs}
  on_success: *fixed-concourse
  on_failure: *broke-concourse

- name: quickstart-smoke
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [build-rc-image]
      trigger: true
    - get: concourse-rc-image
      passed: [build-rc-image]
      params: {format: oci}
      trigger: true
    - get: version
      passed: [build-rc-image]
      trigger: true
    - get: unit-image
    - get: ci
    - get: docs
  - task: quickstart-smoke
    privileged: true
    image: unit-image
    file: ci/tasks/quickstart-smoke.yml
    params:
      RELEASE_NAME: concourse-smoke
  on_success: *fixed-concourse
  on_failure: *broke-concourse

- name: bosh-check-props
  public: true
  max_in_flight: 1
  plan:
  - in_parallel:
    - get: concourse
      passed: [bin-smoke]
      trigger: true
    - get: unit-image
    - get: version
      passed: [bin-smoke]
      trigger: true
    - get: linux-rc-ubuntu
      passed: [bin-smoke]
      trigger: true
    - get: concourse-release-repo
      trigger: true
    - get: ci
  - task: check-props
    file: ci/tasks/check-distribution-env.yml
    image: unit-image
    input_mapping: {distribution: concourse-release-repo, linux-rc: linux-rc-ubuntu}
    params: {DISTRIBUTION: bosh}

- name: bosh-bump
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse
      passed: [build-rc]
      trigger: true
    - get: unit-image
    - get: version
      passed: [build-rc]
    - get: linux-rc-ubuntu
      passed: [build-rc]
      trigger: true
    - get: windows-rc
      passed: [build-rc]
      trigger: true
    - get: concourse-release-repo
    - get: ci
  - task: bump-concourse-blobs
    file: ci/tasks/bump-concourse-blobs.yml
    image: unit-image
    input_mapping: { linux-rc: linux-rc-ubuntu }
    params: {GCP_JSON_KEY: ((concourse_artifacts_json_key))}
  - put: concourse-release-repo
    params: {repository: bumped-concourse-release-repo}

- name: bosh-smoke
  public: true
  serial: true
  plan:
  - in_parallel:
    # these don't trigger, to ensure that the job gets triggered by
    # concourse-release, which is unfortunately decoupled from the resource
    # that we 'put' to.
    - get: concourse
      passed: [bosh-bump]
    - get: unit-image
    - get: version
      passed: [bosh-bump]
    - get: concourse-release
      trigger: true
    - get: postgres-release
      trigger: true
    - get: bpm-release
      trigger: true
    - get: gcp-xenial-stemcell
      trigger: true
    - get: ci
  - put: smoke-deployment
    tags: [bosh]
    params:
      manifest: ci/deployments/bosh-smoke.yml
      releases:
      - concourse-release/*.tgz
      - postgres-release/*.tgz
      - bpm-release/*.tgz
      stemcells:
      - gcp-xenial-stemcell/*.tgz
      vars:
        deployment_name: concourse-smoke
  - task: discover-bosh-endpoint-info
    tags: [bosh]
    file: ci/tasks/discover-bosh-endpoint-info.yml
    image: unit-image
    params:
      BOSH_ENVIRONMENT: https://10.0.0.6:25555
      BOSH_CA_CERT: ((testing_bosh_ca_cert))
      BOSH_CLIENT: ((testing_bosh_client.id))
      BOSH_CLIENT_SECRET: ((testing_bosh_client.secret))
      BOSH_DEPLOYMENT: concourse-smoke
      BOSH_INSTANCE_GROUP: concourse
  - task: smoke
    tags: [bosh]
    image: unit-image
    file: ci/tasks/smoke.yml
  on_success: *fixed-concourse
  on_failure: *broke-concourse

- name: bosh-topgun-core
  public: true
  serial: true
  interruptible: true
  plan:
  - in_parallel:
    # these don't trigger, to ensure that the job gets triggered by
    # concourse-release, which is unfortunately decoupled from the resource
    # that we 'put' to.
    - get: concourse
      passed: [bosh-bump]
    - get: unit-image
    - get: version
      passed: [bosh-bump]
    - get: concourse-release
      trigger: true
    - get: postgres-release
      trigger: true
    - get: bpm-release
      trigger: true
    - get: bbr-sdk-release
      trigger: true
    - get: gcp-xenial-stemcell
      trigger: true
    - get: vault-release
      trigger: true
    - get: credhub-release
      trigger: true
    - get: uaa-release
      trigger: true
    - get: bbr
      trigger: true
    - get: ci
  - task: bosh-topgun
    tags: [bosh]
    file: ci/tasks/topgun.yml
    image: unit-image
    input_mapping:
      stemcell: gcp-xenial-stemcell
    params:
      BOSH_ENVIRONMENT: https://10.0.0.6:25555
      BOSH_CA_CERT: ((testing_bosh_ca_cert))
      BOSH_CLIENT: ((testing_bosh_client.id))
      BOSH_CLIENT_SECRET: ((testing_bosh_client.secret))
      AWS_REGION: ((topgun_aws_ssm.region))
      AWS_ACCESS_KEY_ID: ((topgun_aws_ssm.access_key_id))
      AWS_SECRET_ACCESS_KEY: ((topgun_aws_ssm.secret_access_key))
      SUITE: core
  on_success: *fixed-concourse
  on_failure: *broke-concourse

- name: bosh-topgun-runtime
  public: true
  serial: true
  interruptible: true
  plan:
  - in_parallel:
    # these don't trigger, to ensure that the job gets triggered by
    # concourse-release, which is unfortunately decoupled from the resource
    # that we 'put' to.
    - get: concourse
      passed: [bosh-bump]
    - get: unit-image
    - get: version
      passed: [bosh-bump]
    - get: concourse-release
      trigger: true
    - get: postgres-release
      trigger: true
    - get: bpm-release
      trigger: true
    - get: bbr-sdk-release
      trigger: true
    - get: gcp-xenial-stemcell
      trigger: true
    - get: vault-release
      trigger: true
    - get: credhub-release
      trigger: true
    - get: uaa-release
      trigger: true
    - get: bbr
      trigger: true
    - get: ci
  - task: bosh-topgun
    tags: [bosh]
    file: ci/tasks/topgun.yml
    image: unit-image
    input_mapping:
      stemcell: gcp-xenial-stemcell
    params:
      BOSH_ENVIRONMENT: https://10.0.0.6:25555
      BOSH_CA_CERT: ((testing_bosh_ca_cert))
      BOSH_CLIENT: ((testing_bosh_client.id))
      BOSH_CLIENT_SECRET: ((testing_bosh_client.secret))
      AWS_REGION: ((topgun_aws_ssm.region))
      AWS_ACCESS_KEY_ID: ((topgun_aws_ssm.access_key_id))
      AWS_SECRET_ACCESS_KEY: ((topgun_aws_ssm.secret_access_key))
      SUITE: runtime
  on_success: *fixed-concourse
  on_failure: *broke-concourse

- name: bosh-topgun-both
  public: true
  serial: true
  interruptible: true
  plan:
  - in_parallel:
    # these don't trigger, to ensure that the job gets triggered by
    # concourse-release, which is unfortunately decoupled from the resource
    # that we 'put' to.
    - get: concourse
      passed: [bosh-bump]
    - get: unit-image
    - get: version
      passed: [bosh-bump]
    - get: concourse-release
      trigger: true
    - get: postgres-release
      trigger: true
    - get: bpm-release
      trigger: true
    - get: bbr-sdk-release
      trigger: true
    - get: gcp-xenial-stemcell
      trigger: true
    - get: vault-release
      trigger: true
    - get: credhub-release
      trigger: true
    - get: uaa-release
      trigger: true
    - get: bbr
      trigger: true
    - get: ci
  - task: bosh-topgun
    tags: [bosh]
    file: ci/tasks/topgun.yml
    image: unit-image
    input_mapping:
      stemcell: gcp-xenial-stemcell
    params:
      BOSH_ENVIRONMENT: https://10.0.0.6:25555
      BOSH_CA_CERT: ((testing_bosh_ca_cert))
      BOSH_CLIENT: ((testing_bosh_client.id))
      BOSH_CLIENT_SECRET: ((testing_bosh_client.secret))
      AWS_REGION: ((topgun_aws_ssm.region))
      AWS_ACCESS_KEY_ID: ((topgun_aws_ssm.access_key_id))
      AWS_SECRET_ACCESS_KEY: ((topgun_aws_ssm.secret_access_key))
      SUITE: both
  on_success: *fixed-concourse
  on_failure: *broke-concourse

- name: bosh-topgun-pcf
  public: true
  serial: true
  interruptible: true
  plan:
  - in_parallel:
    # these don't trigger, to ensure that the job gets triggered by
    # concourse-release, which is unfortunately decoupled from the resource
    # that we 'put' to.
    - get: concourse
      passed: [bosh-bump]
    - get: unit-image
    - get: version
      passed: [bosh-bump]
    - get: concourse-release
      trigger: true
    - get: postgres-release
      trigger: true
    - get: bpm-release
      trigger: true
    - get: bbr-sdk-release
      trigger: true
    - get: gcp-xenial-stemcell
      trigger: true
    - get: vault-release
      trigger: true
    - get: credhub-release
      trigger: true
    - get: uaa-release
      trigger: true
    - get: bbr
      trigger: true
    - get: ci
  - task: bosh-topgun
    tags: [bosh]
    file: ci/tasks/topgun.yml
    image: unit-image
    input_mapping:
      stemcell: gcp-xenial-stemcell
    params:
      BOSH_ENVIRONMENT: https://10.0.0.6:25555
      BOSH_CA_CERT: ((testing_bosh_ca_cert))
      BOSH_CLIENT: ((testing_bosh_client.id))
      BOSH_CLIENT_SECRET: ((testing_bosh_client.secret))
      AWS_REGION: ((topgun_aws_ssm.region))
      AWS_ACCESS_KEY_ID: ((topgun_aws_ssm.access_key_id))
      AWS_SECRET_ACCESS_KEY: ((topgun_aws_ssm.secret_access_key))
      SUITE: pcf
  on_success: *fixed-concourse
  on_failure: *broke-concourse

- name: shipit
  public: true
  serial_groups: [version]
  plan:
  - in_parallel:
    - get: concourse
      passed:
      - build-rc
      - k8s-topgun
      - k8s-check-helm-params
      - bosh-smoke
      - bosh-topgun-core
      - bosh-topgun-runtime
      - bosh-topgun-both
      - bosh-topgun-pcf
      - bosh-check-props
    - get: unit-image
      passed:
      - build-rc
      - k8s-topgun
      - k8s-check-helm-params
      - bosh-smoke
      - bosh-topgun-core
      - bosh-topgun-runtime
      - bosh-topgun-both
      - bosh-topgun-pcf
    - get: final-version
      resource: version
      params: {bump: final}
      passed:
      - build-rc
      - k8s-topgun
      - k8s-check-helm-params
      - bosh-smoke
      - bosh-topgun-core
      - bosh-topgun-runtime
      - bosh-topgun-both
      - bosh-topgun-pcf
      - bosh-check-props
    - get: linux-rc
      passed: [build-rc]
    - get: linux-rc-ubuntu
      passed: [build-rc, bosh-check-props]
    - get: windows-rc
      passed: [build-rc]
    - get: darwin-rc
      passed: [build-rc]
    - get: concourse-rc-image
      passed: [k8s-topgun, k8s-check-helm-params]
    - get: concourse-rc-image-ubuntu
      passed: [k8s-topgun, k8s-check-helm-params]
    - get: concourse-release
      passed: [bosh-smoke, bosh-topgun-core, bosh-topgun-runtime, bosh-topgun-both, bosh-topgun-pcf]
    - get: bpm-release
      passed: [bosh-smoke, bosh-topgun-core, bosh-topgun-runtime, bosh-topgun-both, bosh-topgun-pcf]
    - get: postgres-release
      passed: [bosh-smoke, bosh-topgun-core, bosh-topgun-runtime, bosh-topgun-both, bosh-topgun-pcf]
  - put: version
    params: {file: final-version/version}

- name: pre
  public: true
  plan:
  - in_parallel:
    - get: concourse
      passed:
      - build-rc
      - k8s-topgun
      - bosh-smoke
      - bosh-topgun-core
      - bosh-topgun-runtime
      - bosh-topgun-both
      - bosh-topgun-pcf
    - get: unit-image
      passed:
      - build-rc
      - k8s-topgun
      - bosh-smoke
      - bosh-topgun-core
      - bosh-topgun-runtime
      - bosh-topgun-both
      - bosh-topgun-pcf
    - get: version
      passed:
      - build-rc
      - k8s-topgun
      - bosh-smoke
      - bosh-topgun-core
      - bosh-topgun-runtime
      - bosh-topgun-both
      - bosh-topgun-pcf
    - get: linux-rc
      passed: [build-rc]
    - get: linux-rc-ubuntu
      passed: [build-rc]
    - get: windows-rc
      passed: [build-rc]
    - get: darwin-rc
      passed: [build-rc]
    - get: concourse-rc-image
      passed: [k8s-topgun]
    - get: concourse-rc-image-ubuntu
      passed: [k8s-topgun]

- name: publish-pre-binaries
  serial: true
  plan:
  - in_parallel:
    - get: version
      passed: [pre]
      trigger: true
    - get: concourse
      passed: [pre]
    - get: unit-image
      passed: [pre]
    - get: linux-rc
      passed: [pre]
    - get: windows-rc
      passed: [pre]
    - get: darwin-rc
      passed: [pre]
    - get: ci
    - get: release-notes
  - in_parallel:
    - task: prep-release-assets
      file: ci/tasks/prep-release-assets.yml
      image: unit-image
    - task: build-prerelease-notes
      file: ci/tasks/build-prerelease-notes.yml
      image: unit-image
      params:
        GITHUB_TOKEN: ((concourse_github_dummy.access_token))
  - put: concourse-github-pre
    params:
      commitish: concourse/.git/ref
      tag: version/version
      tag_prefix: v
      name: built-notes/release-name
      body: built-notes/notes.md
      globs:
      - concourse-linux/concourse-*.tgz
      - concourse-windows/concourse-*.zip
      - concourse-darwin/concourse-*.tgz
      - fly-linux/fly-*.tgz
      - fly-windows/fly-*.zip
      - fly-darwin/fly-*.tgz
      - concourse-linux/*.sha1
      - concourse-windows/*.sha1
      - concourse-darwin/*.sha1
      - fly-linux/*.sha1
      - fly-windows/*.sha1
      - fly-darwin/*.sha1

- name: publish-binaries
  serial: true
  plan:
  - in_parallel:
    - get: version
      passed: [shipit]
      trigger: true
    - get: concourse
      passed: [shipit]
    - get: unit-image
      passed: [shipit]
    - get: linux-rc
      passed: [shipit]
    - get: windows-rc
      passed: [shipit]
    - get: darwin-rc
      passed: [shipit]
    - get: ci
    - get: release-notes
  - in_parallel:
    - task: prep-release-assets
      file: ci/tasks/prep-release-assets.yml
      image: unit-image
    - task: build-release-notes
      file: ci/tasks/build-release-notes.yml
      image: unit-image
      params:
        GITHUB_TOKEN: ((concourse_github_dummy.access_token))
  - put: concourse-github-release
    params:
      commitish: concourse/.git/ref
      tag: version/version
      tag_prefix: v
      name: built-notes/release-name
      body: built-notes/notes.md
      globs:
      - concourse-linux/concourse-*.tgz
      - concourse-windows/concourse-*.zip
      - concourse-darwin/concourse-*.tgz
      - fly-linux/fly-*.tgz
      - fly-windows/fly-*.zip
      - fly-darwin/fly-*.tgz
      - concourse-linux/*.sha1
      - concourse-windows/*.sha1
      - concourse-darwin/*.sha1
      - fly-linux/*.sha1
      - fly-windows/*.sha1
      - fly-darwin/*.sha1

- name: publish-bosh-release
  serial: true
  plan:
  - in_parallel:
    - get: version
      passed: [shipit]
      trigger: true
    - get: concourse-release
      passed: [shipit]
  - put: concourse-release-final
    params:
      tarball: concourse-release/*.tgz
      version: version/version

- name: bump-cbd-versions
  serial: true
  plan:
  - in_parallel:
    - get: concourse-boshio
      trigger: true
    - get: unit-image
      passed: [shipit]
    - get: cbd-master
    - get: version
      passed: [shipit]
    - get: bpm-release
      passed: [shipit]
    - get: postgres-release
      passed: [shipit]
  - task: bump-versions
    file: cbd-master/ci/bump-versions.yml
    input_mapping: {concourse-bosh-deployment: cbd-master}
    image: unit-image
  - put: cbd-master
    params:
      repository: bumped-repo
      merge: true

- name: promote-cbd
  serial: true
  plan:
  - in_parallel:
    - get: version
      passed: [shipit]
      trigger: true
    - get: cbd
    - get: unit-image
      passed: [shipit]
    - get: bpm-release
      passed: [shipit]
    - get: postgres-release
      passed: [shipit]
  - put: cbd-master
    params:
      repository: cbd
      merge: true

- name: publish-image
  serial: true
  plan:
  - in_parallel:
    - get: version
      passed: [shipit]
      trigger: true
    - get: concourse
      passed: [shipit]
    - get: concourse-rc-image
      passed: [shipit]
      params: {format: oci}
    - get: concourse-rc-image-ubuntu
      passed: [shipit]
      params: {format: oci}
    - get: concourse-rc-image-ubuntu-rootfs
      resource: concourse-rc-image-ubuntu
      passed: [shipit]
    - get: latest-version
    - get: ci
  - in_parallel:
    - do:
      - task: docker-semver-tags
        file: ci/tasks/docker-semver-tags.yml
        input_mapping: {latest-of-same-major-version: latest-version}
        output_mapping: {tags: alpine-tags}

      - put: concourse-image
        inputs: [concourse-rc-image, alpine-tags]
        params:
          image: concourse-rc-image/image.tar
          additional_tags: alpine-tags/tags

    - do:
      - task: docker-semver-tags
        file: ci/tasks/docker-semver-tags.yml
        input_mapping: {latest-of-same-major-version: latest-version}
        output_mapping: {tags: ubuntu-tags}
        params: {SUFFIX: ubuntu}

      - put: concourse-image-ubuntu
        inputs: [concourse-rc-image-ubuntu, ubuntu-tags]
        params:
          image: concourse-rc-image-ubuntu/image.tar
          additional_tags: ubuntu-tags/tags

      - task: generate-dpkg-list
        file: ci/tasks/generate-dpkg-list.yml
        image: concourse-rc-image-ubuntu-rootfs
        params: {COMPONENT_NAME: "concourse"}

      - put: concourse-image-dpkg-list
        inputs: [dpkg-list]
        params: {file: "dpkg-list/concourse-*.txt"}

- name: publish-docs
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse-github-release
      passed: [publish-binaries]
      trigger: true
    - get: docs
  - task: build-docs
    file: docs/ci/build.yml
    params:
      ANALYTICS_ID: ((analytics_id))
      GITHUB_TOKEN: ((concourse_github_dummy.access_token))
  - put: docs-gh-pages
    params: {repository: built-docs}

- name: merge-cbd
  public: true
  serial: true
  plan:
  - get: cbd-master
    trigger: true
  - put: cbd
    params:
      repository: cbd-master
      merge: true

- name: ship-chart
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse-version
      resource: version
      passed: [shipit]
    - get: concourse-chart
      passed: [k8s-topgun]
    - get: unit-image
      passed: [k8s-topgun]

- name: publish-chart
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: concourse-version
      resource: version
      passed: [ship-chart]
    - get: concourse-chart
      passed: [ship-chart]
      trigger: true
    - get: unit-image
      passed: [ship-chart]
    - get: chart-repo-index
    - get: ci
  - task: build-chart
    image: unit-image
    file: ci/tasks/package-chart.yml
  - in_parallel:
    - put: chart-repo-index
      inputs: [packaged-chart]
      params:
        file: packaged-chart/index.yaml
    - put: chart-repo
      inputs: [packaged-chart]
      params:
        file: packaged-chart/concourse-*.tgz
    - put: concourse-chart
      inputs: [concourse]
      params:
        repository: concourse
        merge: true

- name: install-windows-deps
  public: true
  serial: true
  plan:
  - in_parallel:
    - get: golang-windows
    - get: ci
  - task: install-go
    file: ci/tasks/install-go-windows.yml
  - task: install-git
    file: ci/tasks/choco-install.yml
    params: {PACKAGE: git}
  - task: install-mingw
    file: ci/tasks/choco-install.yml
    params: {PACKAGE: mingw}

- name: major
  public: true
  serial_groups: [version]
  plan:
  - put: version
    params: {bump: major, pre: rc}

- name: minor
  public: true
  serial_groups: [version]
  plan:
  - put: version
    params: {bump: minor, pre: rc}

resources:
- name: concourse
  type: git
  icon: &git-icon github-circle
  source:
    uri: https://github.com/concourse/concourse.git
    branch: master
    ignore_paths:
    - release-notes/

- name: ci
  type: git
  icon: *git-icon
  source:
    uri: https://github.com/concourse/ci.git
    branch: master

- name: release-notes
  type: git
  icon: *git-icon
  source:
    uri: https://github.com/concourse/concourse.git
    branch: master
    paths:
    - release-notes/

- name: notify
  type: slack-notifier
  icon: slack
  source:
    url: ((slack_hook))
    username: ((basic_auth.username))
    password: ((basic_auth.password))
    concourse_url: https://ci.concourse-ci.org

- name: dev-image
  type: registry-image
  icon: &image-icon docker
  source:
    repository: concourse/dev
    username: ((docker.username))
    password: ((docker.password))

- name: concourse-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/concourse
    tag: latest
    username: ((docker.username))
    password: ((docker.password))

- name: concourse-image-ubuntu
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/concourse
    tag: ubuntu
    username: ((docker.username))
    password: ((docker.password))

- name: unit-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/unit
    username: ((docker.username))
    password: ((docker.password))

- name: golang-builder-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/golang-builder
    username: ((docker.username))
    password: ((docker.password))

- name: golang-builder-trigger
  type: docker-image
  icon: *image-icon
  source:
    repository: concourse/golang-builder
    username: ((docker.username))
    password: ((docker.password))

- name: postgres-image
  type: registry-image
  icon: *image-icon
  source: {repository: postgres}

- name: dumb-init
  type: github-release
  icon: &release-icon package-variant-closed
  source:
    owner: Yelp
    repository: dumb-init
    access_token: ((concourse_github_dummy.access_token))

- name: bbr
  type: github-release
  icon: *release-icon
  source:
    owner: cloudfoundry-incubator
    repository: bosh-backup-and-restore
    access_token: ((concourse_github_dummy.access_token))

- name: gdn
  type: github-release
  icon: *release-icon
  source:
    owner: cloudfoundry
    repository: garden-runc-release
    access_token: ((concourse_github_dummy.access_token))

- name: containerd
  type: github-release
  icon: *release-icon
  source:
    owner: containerd
    repository: containerd
    access_token: ((concourse_github_dummy.access_token))

- name: runc
  type: github-release
  icon: *release-icon
  source:
    owner: opencontainers
    repository: runc
    access_token: ((concourse_github_dummy.access_token))

- name: cni
  type: github-release
  icon: *release-icon
  source:
    owner: containernetworking
    repository: plugins
    access_token: ((concourse_github_dummy.access_token))

- name: mock-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: mock-resource
    access_token: ((concourse_github_dummy.access_token))

- name: bosh-io-release-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: bosh-io-release-resource
    access_token: ((concourse_github_dummy.access_token))

- name: bosh-io-stemcell-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: bosh-io-stemcell-resource
    access_token: ((concourse_github_dummy.access_token))

- name: cf-resource
  type: github-release
  icon: *release-icon
  source:
    owner: cloudfoundry-community
    repository: cf-resource
    access_token: ((concourse_github_dummy.access_token))

- name: docker-image-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: docker-image-resource
    access_token: ((concourse_github_dummy.access_token))

- name: git-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: git-resource
    access_token: ((concourse_github_dummy.access_token))

- name: github-release-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: github-release-resource
    access_token: ((concourse_github_dummy.access_token))

- name: hg-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: hg-resource
    access_token: ((concourse_github_dummy.access_token))

- name: pool-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: pool-resource
    access_token: ((concourse_github_dummy.access_token))

- name: registry-image-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: registry-image-resource
    access_token: ((concourse_github_dummy.access_token))

- name: s3-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: s3-resource
    access_token: ((concourse_github_dummy.access_token))

- name: semver-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: semver-resource
    access_token: ((concourse_github_dummy.access_token))

- name: time-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: time-resource
    access_token: ((concourse_github_dummy.access_token))

- name: tracker-resource
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: tracker-resource
    access_token: ((concourse_github_dummy.access_token))

- name: oci-build-task
  type: registry-image
  icon: *image-icon
  source: {repository: vito/oci-build-task}

- name: version
  type: semver
  icon: tag
  source:
    driver: gcs
    bucket: concourse-artifacts
    json_key: ((concourse_artifacts_json_key))
    key: version

- name: linux-rc
  type: gcs
  icon: linux
  source:
    bucket: concourse-artifacts
    json_key: ((concourse_artifacts_json_key))
    regexp: rcs/concourse-(.*)-linux-amd64.tgz

- name: linux-rc-ubuntu
  type: gcs
  icon: linux
  source:
    bucket: concourse-artifacts
    json_key: ((concourse_artifacts_json_key))
    regexp: rcs/concourse-(.*)-linux-ubuntu-amd64.tgz

- name: windows-rc
  type: gcs
  icon: windows
  source:
    bucket: concourse-artifacts
    json_key: ((concourse_artifacts_json_key))
    regexp: rcs/concourse-(.*)-windows-amd64.zip

- name: darwin-rc
  type: gcs
  icon: apple
  source:
    bucket: concourse-artifacts
    json_key: ((concourse_artifacts_json_key))
    regexp: rcs/concourse-(.*)-darwin-amd64.tgz

- name: docs
  type: git
  icon: *git-icon
  source:
    uri: https://github.com/concourse/docs
    branch: master

- name: docs-gh-pages
  type: git
  icon: *git-icon
  source:
    uri: git@github.com:concourse/docs
    branch: gh-pages
    private_key: ((docs_deploy_key))

- name: concourse-release
  type: bosh-release
  icon: *release-icon
  source:
    uri: https://github.com/concourse/concourse-bosh-release
    branch: master
    dev_releases: true
    private_config: &release_private_config
      blobstore:
        provider: gcs
        options:
          credentials_source: static
          json_key: ((concourse_artifacts_json_key))

- name: concourse-release-final
  type: bosh-release
  icon: truck
  source:
    uri: git@github.com:concourse/concourse-bosh-release
    branch: master
    private_config: *release_private_config
    private_key: ((concourse_release_deploy_key))

- name: postgres-release
  type: bosh-io-release
  icon: *release-icon
  source:
    repository: cloudfoundry/postgres-release

- name: bpm-release
  type: bosh-io-release
  icon: *release-icon
  source:
    repository: cloudfoundry/bpm-release

- name: bbr-sdk-release
  type: bosh-io-release
  icon: *release-icon
  source:
    repository: cloudfoundry-incubator/backup-and-restore-sdk-release

- name: vault-release
  type: bosh-io-release
  icon: *release-icon
  source:
    repository: vito/vault-boshrelease

- name: credhub-release
  type: bosh-io-release
  icon: *release-icon
  source:
    repository: pivotal-cf/credhub-release

- name: uaa-release
  type: bosh-io-release
  icon: *release-icon
  source:
    repository: cloudfoundry/uaa-release

- name: concourse-release-repo
  type: git
  icon: *git-icon
  source:
    uri: git@github.com:concourse/concourse-bosh-release
    branch: master
    private_key: ((concourse_release_deploy_key))

- name: smoke-deployment
  tags: [bosh]
  type: bosh-deployment
  icon: fire
  source:
    target: https://10.0.0.6:25555
    client: ((testing_bosh_client.id))
    client_secret: ((testing_bosh_client.secret))
    ca_cert: ((testing_bosh_ca_cert))
    deployment: concourse-smoke

- name: gcp-xenial-stemcell
  type: bosh-io-stemcell
  icon: *release-icon
  source:
    name: bosh-google-kvm-ubuntu-xenial-go_agent

- name: cbd
  type: git
  icon: *git-icon
  source:
    uri: git@github.com:concourse/concourse-bosh-deployment.git
    branch: develop
    private_key: ((concourse_deployment_repo_private_key))

- name: cbd-master
  type: git
  icon: *git-icon
  source:
    uri: git@github.com:concourse/concourse-bosh-deployment.git
    branch: master
    private_key: ((concourse_deployment_repo_private_key))

- name: concourse-docker
  type: git
  icon: *git-icon
  source:
    uri: https://github.com/concourse/concourse-docker

- name: concourse-chart
  type: git
  icon: *git-icon
  source:
    uri: git@github.com:concourse/concourse-chart.git
    branch: master
    private_key: ((concourse_chart_private_key))

- name: helm-charts
  type: git
  icon: *git-icon
  source:
    uri: https://github.com/helm/charts.git
    branch: master

- name: golang-windows
  type: s3
  icon: language-go
  source:
    endpoint: storage.googleapis.com
    bucket: golang
    regexp: 'go(\d+\.\d+(\.\d+)?)\.windows-amd64\.msi'

- name: golang-linux
  type: s3
  icon: language-go
  source:
    endpoint: storage.googleapis.com
    bucket: golang
    regexp: 'go(\d+\.\d+(\.\d+)?)\.linux-amd64\.tar\.gz'

- name: concourse-github-release
  type: github-release
  icon: truck
  source:
    owner: concourse
    repository: concourse
    access_token: ((concourse_github_release.access_token))

- name: concourse-github-pre
  type: github-release
  icon: truck
  source:
    owner: concourse
    repository: concourse
    access_token: ((concourse_github_release.access_token))
    release: false
    pre_release: true

- name: concourse-boshio
  type: bosh-io-release
  icon: *release-icon
  source:
    repository: concourse/concourse-bosh-release

- name: latest-version
  type: github-release
  icon: *release-icon
  source:
    owner: concourse
    repository: concourse
    access_token: ((concourse_github_release.access_token))

- name: resource-types-alpine-image
  type: registry-image
  icon: &image-icon docker
  source:
    repository: concourse/resource-types
    username: ((docker.username))
    password: ((docker.password))

- name: resource-types-ubuntu-image
  type: registry-image
  icon: &image-icon docker
  source:
    repository: concourse/resource-types
    tag: ubuntu
    username: ((docker.username))
    password: ((docker.password))

- name: concourse-rc-image
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/concourse-rc
    username: ((docker.username))
    password: ((docker.password))

- name: concourse-rc-image-ubuntu
  type: registry-image
  icon: *image-icon
  source:
    repository: concourse/concourse-rc
    tag: ubuntu
    username: ((docker.username))
    password: ((docker.password))

- name: concourse-image-dpkg-list
  type: gcs
  icon: format-list-bulleted
  source:
    bucket: concourse-ubuntu-dpkg-list
    json_key: ((concourse_dpkg_list_json_key))
    regexp: "concourse-dpkg-list-(.*).txt"

- name: chart-repo
  type: gcs
  source:
    bucket: concourse-charts
    json_key: ((concourse_charts_json_key))
    regexp: concourse-(.*)\.tgz

- name: chart-repo-index
  type: gcs
  source:
    bucket: concourse-charts
    json_key: ((concourse_charts_json_key))
    versioned_file: index.yaml
